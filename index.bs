<pre class='metadata'>
Title: Priority Hints
Shortname: PriorityHints
Level: 1
Status: CG-Draft
Group: WICG
URL: https://wicg.github.io/priority-hints
Editor: Patrick Meenan, Google Inc., patmeenan@gmail.com, https://twitter.com/patmeenan
Editor: Addy Osmani, Google Inc., addyosmani@gmail.com, https://addyosmani.com/
Former Editor: Yoav Weiss 58673, Google Inc., yoav@yoav.ws, https://blog.yoav.ws
Abstract: Priority Hints exposes a mechanism for developers to signal a relative priority for browsers to consider when fetching resources.
Markup Shorthands: markdown yes
Default Highlight: js
</pre>

<pre class=anchors>
urlPrefix: https://html.spec.whatwg.org/multipage; spec: HTML;
    type:dfn; for:/; text: enumerated attribute
    type:dfn; for:/; text: invalid value default
    type:dfn; for:/; text: missing value default
urlPrefix: https://html.spec.whatwg.org/multipage/urls-and-fetching.html; spec: HTML;
    type: dfn; url: #fetching-resources; text: Fetching resources;
urlPrefix: https://html.spec.whatwg.org/multipage/images.html; spec: HTML;
    type: dfn; url: #update-the-image-data; text: update the image data;
    type: dfn; url: #reacting-to-environment-changes; text: Reacting to environment changes;
urlPrefix: https://html.spec.whatwg.org/multipage/embedded-content.html; spec: HTML;
    type: element; url: #the-img-element; text: img
    type: dfn; url: #the-img-element; text: img element;
urlPrefix: https://html.spec.whatwg.org/multipage/links.html; spec: HTML;
    type: dfn; url: #external-resource-link; text: external resource links;
    type: dfn; url: #link-type-modulepreload; text: modulepreload;
urlPrefix: https://html.spec.whatwg.org/multipage/semantics.html; spec: HTML;
    type: element; url: #the-link-element; text:link
    type: dfn; url: #the-link-element; text: link element;
    type: dfn; url: #create-a-link-request; text: create a link request;
    type: dfn; url: #fetch-and-process-the-linked-resource; text: fetching and processing the linked resource;
    type: dfn; url: #fetch-and-process-the-linked-resource; text: fetch and process the linked resource;
    type: dfn; url: #fetching-and-processing-a-resource-from-a-link-element; text: Fetching and processing a resource from a link element;
urlPrefix: https://html.spec.whatwg.org/multipage/scripting.html; spec: HTML;
    type: element; text:script
    type: dfn; url: #the-script-element; text: script element;
    type: dfn; url: #the-script-element:data-block-2; text: data blocks;
    type: dfn; url: #:~:text=dynamically%20has%20no%20direct%20effect; text: direct effect when changed dynamically;
    type: dfn; url: #prepare-a-script; text: prepare a script;
urlPrefix: https://html.spec.whatwg.org/multipage/webappapis.html; spec: HTML;
    type: dfn; url: #script-fetch-options; text: Script fetch options;
    type: dfn; url: #set-up-the-module-script-request; text: set up the module script request;
    type: dfn; url: #default-classic-script-fetch-options; text: default classic script fetch options;
    type: dfn; url: #set-up-the-classic-script-request; text: set up the classic script request;
urlPrefix: https://html.spec.whatwg.org/multipage/indices.html; spec: HTML;
    type: dfn; url: #elements-3; text: List of elements;
urlPrefix: https://fetch.spec.whatwg.org; spec: FETCH;
    type:dfn; url: #concept-request-destination; text:destination
</pre>

<pre class=biblio>
{
    "RFC5988": {
        "authors": [
            "Mark Nottingham"
        ],
        "href": "https://tools.ietf.org/html/rfc5988",
        "publisher": "IETF",
        "title": "Web Linking"
    }
}
</pre>

<body>
  <section>
    <p>
      This specification describes a browser API enabling developers to signal the priority of each resource they need to download.
      It introduces the
      <a href="#solution">fetchpriority</a> <a data-lt="enumerated attribute">attribute</a> that may be used with <code>HTML</code> elements such as
      <{img}>, <{link}>, and <{script}> as well as the {{RequestInit/priority}} <a data-lt="enumerated attribute">attribute</a>
      on the {{Request|RequestInit}} of [[fetch#fetch-method|fetch]]. 
    </p>
  </section>
  <section id="sotd">
    <p>
      This is an unofficial proposal.
    </p>
  </section>

  <section>
    <h2 id="introduction">Introduction</h2>
    <p>
      <em>This section is non-normative.</em>
    </p>
    <p>The browser's resource loading process is a complex one. Browsers discover needed resources and download them according
      to their heuristic priority. Browsers might also use this heuristic resource priority to delay sending certain requests
      in order to avoid bandwidth contention of these resources with more critical ones.</p>

    <p>Browsers mostly determine a request's priority based on the
      request's <a>destination</a>, and location in the containing document if applicable.</p>

    <p>This document details use cases and modifications to [[FETCH|Fetch]] and [[HTML|HTML]] markup that provide developers
      control to indicate a resource's relative priority to the browser, enabling the browser to act on those indications to influence
      the request's overall priority in ways described in the <a href="#effects-of-priority-hints">Effects of Priority Hints</a> section.
    </p>

    <p>It is important to note that changing the priority of one resource usually comes at the cost of another resource so
    hints should be applied sparingly. Marking everything in the document as high-priority will likely make for a worse user experience
    but correctly tagging a few resources that the browser would otherwise not load optimally can have a huge benefit.
    </p>

  </section>

  <section>
    <h2 id="solution">Solution</h2>

    <p>The
      <code>fetchpriority</code> <a>enumerated attribute</a> may be used with resource-requesting elements including <{link}>,
      <{img}>, and <{script}>. This keyword hints to the browser the relative fetch priority
      a developer intends for a resource to have.</p>

    <ul>
      <li>The <code>fetchpriority</code> attribute has three states:
        <ul>
          <li>
            <code>high</code> - The developer considers the resource as being
            important relative to the default priority for resources of the
            same type.
          </li>
          <li>
            <code>low</code> - The developer considers the resource as being
            less important relative to the default priority for resources of
            the same type.
          </li>
          <li>
            <code>auto</code> - The developer does not indicate a preference and defers to
            the browser's default heuristics. This also serves as the attribute's <a>invalid value default</a>
            and <a>missing value default</a>.
          </li>
        </ul>
      </li>
    </ul>

    <p>With this attribute, the browser should make an effort to respect the developer's preference for the priority of a
      resource when fetching it. Note that this is intentionally weak language, allowing for a browser to apply its own preferences
      for resource priority or heuristics if deemed important. See the below section for more information.
    </p>

    <p>
      <div class="note">
        <p>Priority Hints complement existing browser loading primitives such as preload. Preload is a mandatory fetch for a resource
          that is necessary for the current navigation. Priority Hints can hint that a resource's priority should be lower or higher than
          its default, and can also be used to provide more granular prioritization to preloads.</p>
      </div>
    </p>

    <p>This is how we conceptually think about different resource types under the hood in browsers today. It may translate well
      to user-space where different types of content share similar properties.</p>

    <h2 id="proposal">Proposal</h2>
    <h3 id="definitions">Definitions</h3>
    <dfn id="fetchpriority-enum" export>FetchPriority enum</dfn>
    <pre class=idl>
    enum FetchPriority { "high", "low", "auto" };
    </pre>
    <table>
      <thead>
      <tr>
        <th>Value
        <th>Description
      <tbody>
      <tr>
        <td><dfn id="fetchpriority-enum-high" export>high</dfn>
        <td>Signal a high-priority fetch relative to the default priority for resources of the same type.
      <tr>
        <td><dfn id="fetchpriority-enum-low" export>low</dfn>
        <td>Signal a low-priority fetch relative to the default priority for resources of the same type.
      <tr>
        <td><dfn id="fetchpriority-enum-auto" export>auto</dfn>
        <td>Signal automatic determination of fetch priority.
    </table>

    <h3 id="fetch-integration">Fetch Integration</h3>
    <p>The {{RequestInit/priority}} attribute is documented in the [[FETCH|Fetch]] specification.</p>

    <h3 id="html-integration">HTML Integration</h3>
    <em>This section will be removed once the [[HTML|HTML]] specification has been modified.</em>
    <p>For the supported elements (<{img}>, <{link}>, and <{script}>) the integration
    with HTML is to add an <code data-x="">fetchpriority</code> attribute to the relevant element
    specification and pass the value through to the underlying fetch priority for the resource
    referenced by the given element.</p>
    <p>The fetchpriority value is plumbed through to the fetch for the referenced resource with
    no downstream impact on later behaviors of the given element (i.e. later fetches initiated by
    a script are not impacted nor is the scheduling of execution or prioritization of
    tasks affected).</p>

    <ol>
    <li><p>We extend the [=Fetching resources=] process with an additional section:</p>
      <p>FetchPriority attributes</p>
      <p>A <dfn export>fetchpriority attribute</dfn> is an <span>enumerated attribute</span>.  Each
        [=fetchpriority enum|FetchPriority enum=] is a keyword for this attribute, mapping
        to a state of the same name.</p>
      <p>The attribute's <i data-x="missing value default">missing value default</i> and <i
        data-x="invalid value default">invalid value default</i> are both the [=auto=] state.</p>
      <p>The impact of these states on the processing model of various [=fetch|fetches=] is defined
      in more detail throughout this specification, in [[FETCH|Fetch]], and in
      [[PRIORITY-HINTS|Priority Hints]].</p>
    </ol>

    <h4 id="img">img</h4>
    <ol>
      <li><p>We add to the <{img}> element content attributes:</p>
        <p><code data-x="">fetchpriority</code> - FetchPriority for [=fetch|fetches=] initiated by
          the element.
        </p>
      <li>We extend the <{img}> element DOM interface as follows:
        <pre class="idl">
        partial interface HTMLImageElement {
            [CEReactions] attribute DOMString <span data-x="dom-img-fetchpriority">fetchPriority</span>;
        };
        </pre>
      <li><p>We add to the <{img}> element content attribute descriptions:</p>
        <p>The <dfn element-attr for="img"><code data-x="attr-img-fetchpriority">fetchpriority</code>
          </dfn> attribute is a [=fetchpriority attribute=]. Its purpose is to set the [=priority=]
          used when [=fetching=] the image.</p>
        <p>The <dfn attribute for="HTMLImageElement"><code
          data-x="dom-img-fetchpriority">fetchPriority</code></dfn> IDL attribute must
          <span>reflect</span> the <code data-x="attr-img-fetchpriority">fetchpriority</code>
          content attribute, <span>limited to only known values</span>.</p>
      <li><p>We add a step to [=update the image data|Updating the image data=] before fetching the
          image:</p>
        <p>Set <var>request</var>'s <a spec=fetch for=request>priority</a> to the current state of the element's
          <code data-x="attr-img-fetchpriority">fetchpriority</code> attribute.</p>
      <li><p>We add a step to [=Reacting to environment changes=] when setting the image request's
          image data, before the request is fetched:</p>
        <p>Set <var>request</var>'s <a spec=fetch for=request>priority</a> to the current state of the element's
          <code data-x="attr-img-fetchpriority">fetchpriority</code> attribute.</p>
      <li>We modify the [=List of elements=] to include the 
        <span data-x="attr-img-fetchpriority">fetchpriority</span> attribute on the <{img}> element.
    </ol>

    <h4 id="picture">picture</h4>
    <p>In the case of the <{picture}> element, no changes are necessary. The fetchpriority is applied
    to the <{img}> element within the <{picture}> and applied to whatever <{source}> ends up being
    used.
    </p>

    <h4 id="link">link</h4>
    <ol>
      <li><p>We add to the [=link element=] content attributes:</p>
        <p><code data-x="">fetchpriority</code> - FetchPriority for [=fetch|fetches=] initiated by the
          element.
        </p>
      <li><p>We add to the [=link element=] content attribute descriptions:</p>
        <p>The <dfn element-attr for="link"><code data-x="attr-link-fetchpriority">fetchpriority</code>
          </dfn> attribute is a [=fetchpriority attribute=]. It is intended for use with
          [=external resource links=], where it helps set the [=priority=] used when
          [=fetching and processing the linked resource=].</p>
      <li>We extend the <{link}> element as follows:
        <pre class="idl">
        partial interface HTMLLinkElement {
            [CEReactions] attribute DOMString fetchPriority;
        };
        </pre>
      <li><p>We extend [=create a link request=] of [=Fetching and processing a resource
        from a link element=] by adding a step before returning the request:</p>
        <p>Set <var>request</var>'s <a spec=fetch for=request>priority</a> to the current state of <var ignore=''>
        el</var>'s <code data-x="attr-link-fetchpriority">fetchpriority</code> content attribute.</p>
      <li><p>We extend the [=fetch and process the linked resource=] algorithm of [=modulepreload=]
        links by adding a step before setting the render-blocking state:</p>
        <p>Let <a spec=fetch for=request>priority</a> be the current state of the element's
        <code data-x="attr-link-fetchpriority">fetchpriority</code> attribute.</p>
      <li>We modify the [=List of elements=] to include the 
        <span data-x="attr-link-fetchpriority">fetchpriority</span> attribute on the <{link}> element.
    </ol>

    <h4 id="script">script</h4>
    <ol>
      <li><p>We add to the <{script}> element content attributes:</p>
        <p><code data-x="">fetchpriority</code> - FetchPriority for [=fetch|fetches=] initiated by the
          element.
        </p>
      <li>We extend the <{script}> element DOM interface as follows:
        <pre class="idl">
        partial interface HTMLScriptElement {
            [CEReactions] attribute DOMString <span data-x="dom-script-fetchpriority">fetchPriority</script>;
        };
        </pre>
      <li><p>We add to the <{script}> element content attribute descriptions:</p>
        <ol>
          <li>The <dfn element-attr for="script"><code data-x="attr-script-fetchpriority">fetchpriority
            </code></dfn> attribute is a [=fetchpriority attribute=]. Its purpose is to set the
            [=priority=] used when [=fetching=] the script.
          <li>The <dfn attribute for="HTMLScriptElement"><code
            data-x="dom-script-fetchpriority">fetchPriority</code></dfn> IDL attribute must
            <span>reflect</span> the <code data-x="attr-script-fetchpriority">fetchpriority</code>
            content attribute, <span>limited to only known values</span>.
          <li>We add <code data-x="attr-script-fetchpriority">fetchpriority</code> to the list of
            attributes that have no [=direct effect when changed dynamically=] (For browsers that
            don't support text linking, search for "dynamically has no direct effect").
        </ol>
      <li>We modify the list of attributes not to be specified when used in [=data blocks=] to
        include the <code data-x="attr-script-fetchpriority">fetchpriority</code> attribute.
      <li><p>We extend the [=Script fetch options=] struct:<p>
        <p><span data-x="concept-script-fetch-options-fetchpriority">fetchpriority</span> - The
          <a spec=fetch for=request>priority</a> for the initial [=fetch=].</p>
      <li>We extend [=default classic script fetch options=] to include "<code>auto</code>"
        as the default value for <code data-x="concept-script-fetch-options-fetchpriority">
        fetchpriority</code>.
      <li>We extend [=set up the classic script request=] to set <var>request</var>'s
        <a spec=fetch for=request>priority</a> to <var>option</var>'s
        <code data-x="concept-script-fetch-options-fetchpriority">fetchpriority</code>
      <li><p>We insert a step before step 24 of [=prepare a script=]:</p>
        <p>Let <var>fetchpriority</var> be the current state of the element's <code
          data-x="attr-script-fetchpriority">fetchpriority</code> attribute.</p>
      <li><p>We modify step 24 of [=prepare a script=] to include:</p>
        <p><code data-x="concept-script-fetch-options-fetchpriority">fetchpriority</code> is
        <var>fetchpriority</var>.</p>
      <li>We extend [=set up the module script request=] to set <var>request</var>'s
        <a spec=fetch for=request>priority</a> to <var>option</var>'s
        <code data-x="concept-script-fetch-options-fetchpriority">fetchpriority</code>
      <li>We modify the [=List of elements=] to include the 
        <span data-x="attr-script-fetchpriority">fetchpriority</span> attribute on the <{script}>
        element.
    </ol>

    <h2 id="effects-of-priority-hints">Effects of Priority Hints</h2>

    <p>Since the user agents' resource loading pipeline is largely unspecified, this document doesn't describe a specific mapping
      between Priority Hints and request prioritization. However, it does describe ways in which implementations are encouraged to
      influence a request's overall fetch priority given a Priority Hint.</p>

    <strong>HTTP Stream Priority</strong>
    <p>
    <p>Implementations are encouraged to use Priority Hints to influence the
      <a href="https://httpwg.org/http-extensions/draft-ietf-httpbis-priority.html#name-urgency">stream urgency</a> assigned to
      a given request when
      <a href="https://httpwg.org/http-extensions/draft-ietf-httpbis-priority.html">HTTP extensible prioritization</a> is
      being used at the transport layer (for example, with HTTP/3).
      It is not the intention of the different <code>priority</code> states to directly map to existing browser priority values,
      but instead act as a relative influencer among requests of a similar type.</p>
    </p>
    <div class="example">
      <p>
        If requests for <code>image</code>
        <a data-lt="destination">destinations</a> in a particular implementation are typically assigned a stream urgency of
        <code>3</code>, a request for an image with <code>fetchpriority="high"</code> might be assigned a stream urgency less than
        <code>3</code> (where lower values are higher priority).</p>
    </div>

    <strong>HTTP/2 Relative Stream Priority</strong>
    <p>Implementations are encouraged to use Priority Hints to influence the HTTP/2 stream priority assigned to a given request
      when <a href="https://httpwg.org/http2-spec/draft-ietf-httpbis-http2bis.html#name-prioritization">HTTP/2 prioritization</a>
      is being used at the transport layer.
      It is not the intention of the different <code>priority</code> states to directly map to existing browser priority values,
      but instead act as a relative influencer among requests of a similar type.</p>
    <div class="example">
      <p>
        If requests for <code>image</code>
        <a data-lt="destination">destinations</a> in a particular implementation are typically assigned a stream weight of
        <code>60</code>, a request for an image with <code>fetchpriority="high"</code> might be assigned a stream weight higher than
        <code>60</code>.
      </p>
    </div>

    <strong>Queueing</strong>
    <p>A user agent might choose to queue up certain low-priority requests until higher-priority requests are sent out or finished
      in order to reduce bandwidth contention. Implementations are encouraged to use Priority Hints to determine whether a given
      request is a candidate for such queueing so that more important resources are fetched and used earlier, in order to improve
      the user's experience.</p>

    <h2 id="examples">Examples</h2>

    <strong>Provide parse-time hints about image priorities</strong>
    <p>Browsers make a best-effort to assign a reasonable fetch priority to images so those in-viewport appear as soon as possible.
      In many cases, this will not cause issues, however, what if some above-the-fold imagery is not as critical as others?
      Making the in-viewport evaluation also relies on waiting for layout and adjusting the priority of in-flight images.</p>

    <div class="example" title="Images Example Before">
      <p>FastCorp Inc. have a carousel of images at the top of a page with the first image visible and the remaining images
        images off screen. The markup of this carousel may look as follows:</p>
      <xmp highlight="html">
        <ul class="carousel">
          <!-- The first image is visible -->
          <img src="img/carousel-1.jpg">
          <!-- The other carousel images are not -->
          <img src="img/carousel-2.jpg">
          <img src="img/carousel-3.jpg">
          <img src="img/carousel-4.jpg">
        </ul>
      </xmp>
    </div>


    <p>Browser heuristics may cause all four images to be initially queued at a low priority
      and increased to a high priprity once layout determines they are within the viewport,
      despite three of them not initially being visible. This may cause the initial image
      fetch to be delayed and the fetches for the hidden images to
      delay the first image from completing fetching or contend with fetches for other
      in-viewport resources.</p>
    <p>A developer could use rel=preload to preload the first image in the carousel,
      however doing so may not provide the outcome one expects: rel=preload may just change
      when the image is discovered but will not necessarily influence the priority of the image.
      Priority Hints may help here.</p>

    <div class="example" title="Images Example with Priority Hints">
      <xmp highlight="html">
        <ul class="carousel">
          <!-- The first image is visible -->
          <img src="img/carousel-1.jpg" fetchpriority="high">
          <!-- The other carousel images are not -->
          <img src="img/carousel-2.jpg" fetchpriority="low">
          <img src="img/carousel-3.jpg" fetchpriority="low">
          <img src="img/carousel-4.jpg" fetchpriority="low">
        </ul>
      </xmp>
    </div>

    <p>When we assign the first image high fetchpriority, this can start the image at a high
    priority as soon as it is discovered without having to wait for layout.</p>

    <p>When we assign the off-screen images low fetchpriority, this will create less contention
      between the remaining high-priority images and other high-priority resources.</p>

    <strong>Signal Priority of Asynchronous Scripts</strong>
    <p>A browser may treat parser-blocking scripts, async scripts and preloaded scripts
    differently based on heuristics that work well in a general case but may not behave exactly
    as a developer desires.</p>
    <div class="example" title="Async Script Example Before">
      <p>if a browser treats preloaded scripts as high-priority and async scripts as low-priority
      by default, it could be difficult to preload a dependency of an async script and still have
      them load in the desired order. For example, if we have a script <code>a.js</code> that
      imports <code>b.js</code>, it could be useful to preload <code>b.js</code> so the fetch can
      start in parallel with the loading of <code>a.js</code>. A trivial implementation of
      preloading the dependency after the main script:
      </p>
      <xmp highlight="html">
        <script src=a.js async></script>
        <link rel=preload href=b.js as=script>
      </xmp>
      <p>may result in <code>b.js</code> being loaded before <code>a.js</code> in a browser where
      preloaded scripts are given a higher priority than async scripts.
    </div>

    <p>By using priority hints and assigning the same priority to both scripts, they can be loaded
    in the preferred order and at a priority that makes sense depending on the context of what the
    script is being used for (say, high-priority for user-facing UI or functionality or
    low-priority for scripts responsible for background work).</p>
    <div class="example" title="Async Script Example with Priority Hints">
      <xmp highlight="html">
        <script src=a.js async fetchpriority=high></script>
        <link rel=preload href=b.js as=script fetchpriority=high>
      </xmp>
    </div>

    <strong>Reduce network contention from non-critical Fetch API requests</strong>
    <p>Priority Hints can be used to lower the priority of non-critical Fetch API requests to avoid
    them contending with more important ones.
    </p>

    <p>A news site making a critical Fetch API request for article content might end up contending
    with requests for less important resources like related content.
    </p>

    <div class="example" title="Fetch Example Before">
      <xmp highlight="javascript">
        // Critical Fetch request for article content
        fetch('/api/articles.json').then(/*...*/)

        // Request for related content contending with the above request
        fetch('/api/related.json').then(/*...*/)
      </xmp>
    </div>

    <p>By using the <code>priority</code> property on the second Fetch request, we can hint that
    the priority of that request is <code>low</code>, reducing the chances of it contending with the
    Fetch request for article content. We can also explicitly state the priority of the first
    request is <code>high</code> so that browsers where Fetch requests do not already have a high
    priority know that it is important to the page.</p>

    <div class="example" title="Fetch Example with Priority Hints">
      <xmp highlight="javascript">
        // Critical Fetch request for article content
        fetch('/api/articles.json', { priority: 'high' }).then(/*...*/)

        // Request for related content now reduced in priority
        // reducing the opportunity for contention
        fetch('/api/related.json', { priority: 'low' }).then(/*...*/)
      </xmp>
    </div>

    <p>This might be more pronounced on HTTP 1.1 with the impact being more visible with HTTP/2
    multiplexing if a large number of Fetch requests are being made and are contending with one
    another.</p>

    <strong>Providing Priority Hints through HTTP Headers</strong>
    <p>The fetchpriority hint MAY be specified in the document markup, MAY be provided via JavaScript,
    MAY be provided via the HTTP header, and MAY be dynamically added to the document.</p>
    <div class="example" title="HTTP Header Example">
      <xmp>
        Link: </app/style.css>; fetchpriority=high
        Link: </app/script.js>; fetchpriority=low
      </xmp>
    </div>

    <p>As above examples illustrate, fetchpriority can be specified via declarative markup, Link HTTP header ([[RFC5988|RFC5988]]), 
    or scheduled via JavaScript.</p>

    <h2 id="adoptionpath">Adoption path</h2>

    <p>The markup signals and script APIs are backward-compatible in that
    non-supporting browsers will simply ignore them and load all resources as they
    normally would without the additional hints.</p>

    <h2 id="outofscope">Out of scope</h2>

    <ul>
      <li>Signal that certain images should not block the load event.</li>

      <li>Signals relating the script execution order, script execution grouping, execution dependency, etc.</li>

      <li>Signal the execution priority of <{script}> elements beyond the load of the initial resource.</li>
    </ul>
  </section>

  <section>
    <h2 id="use-cases">Use Cases</h2>

    <p>This section outlines the different use-cases Priority Hints sets out to address.</p>

    <h3 id="communicateresourcefetchprioritytothebrowser">Communicate resource fetch priority to the browser</h3>

    <p>The browser assigns priorities and certain dependencies to downloaded resources and uses them to determine:</p>

    <ul>
      <li>When the resource's request is sent to the server.</li>

      <li>What HTTP/2 dependencies and weights or HTTP/3 priorities are assigned to the resource's request.</li>
    </ul>

    <p>The browser uses various heuristics in order to do the above, which are based on the type of resource, its location in
      the document, and more.</p>

    <p>Web developers can often be in a better position to know which resources are more impactful than others on their
      users' loading experience, and need a way to communicate that to the browser.</p>


    <h3 id="signalaresourceasnoncritical">Signal a resource as non-critical</h3>

    <p>Using
      <code>&lt;link rel=preload&gt;</code> in order to get the browser to early-discover certain resources, especially in its header form, means that the browser
      may discover these resources before other, more critical resources and send their request to the server first. That
      can result in loading regressions as the server may start sending those non-critical resources before other, more critical
      ones, which may fill up the TCP socket sending queues.</p>
    <p>While better transport protocols (e.g. QUIC) may address that at a lower layer for the single origin case, developers
      should be able to signal to the browser that a certain resource is not critical, and therefore should be queued until
      such resources are discovered. Such marking as "non-critical" should be orthogonal to the signaling of the resource's
      "fetch priority" (e.g. this could be applied to high priority resources that shouldn't contend with rendering-critical
      resources as well as low priority ones).</p>

    <h3 id="avoidbandwidthcontentioninmultipleoriginscenarios">Avoid bandwidth contention in multiple origin scenarios</h3>

    <p>When loading resources from multiple origins, setting HTTP/2 dependencies and weights do very little to avoid bandwidth
      contention between the origins, as each origin tries to send down its most critical resource without knowing of more
      critical resources in other origins. Signaling resource priority to the browser can enable it to defer sending of
      non-critical third party requests while critical resources are still being downloaded.</p>

    <h3 id="provideprioritysignalsformarkupbasedresources">Provide priority signals for markup-based resources</h3>

    <p>Developers need a way to provide the above signals for resources that are loaded through markup (or through markup-equivalent
      HTTP headers, e.g.
      <code>Link:</code>)</p>

    <h3 id="provideprioritysignalsfordynamicallyloadedresources">Provide priority signals for dynamically loaded resources</h3>

    <p>Developers need a way to provide the above signals for resources that are fetched through JavaScript, e.g., using the
      <code>fetch()</code> API. That would enable them both to upgrade and downgrade those resource's "priority".
    </p>

  </section>

  <section data-dfn-for="safety">
    <h2 id="safe-usage">Safe usage</h2>
    <div class="note">
      <p>If the
        <code>fetchpriority</code> keyword is used as an optimization to initiate earlier fetch then no additional feature detection checks are necessary:
        browsers that support
        <code>fetchpriority</code> may initiate earlier fetch, and those that do not will ignore it and fetch the resource as previously. Otherwise,
        if the application intends to rely on
        <code>fetchpriority</code> to fetch the resource, then it can execute a feature detection check to verify that it is supported.
      </p>
    </div>

    <p>Applying
      <code>fetchpriority</code> appropriately to the resources in a page should never degrade performance. This should hold true for both browsers that support
      Priority Hints as well as browsers that do not. UAs are free to apply other heuristics in addition to Priority Hints
      to decide on how they load content.</p>
    <p>With in-viewport images, a browser may automatically detect if the image is important and boost priority if it gets to
      layout early enough. However, all browsers would benefit from knowing which images an author wants to load "earlier"
      and which are safe to load "later", regardless of how they use this information.</p>
    <p>This same logic applies for scripts. Browsers may have different heuristics that work differently across browsers for
      scripts (e.g with
      <code>async</code>,
      <code>defer</code>) but a site could fix any misguesses across the board by being explicit using Priority Hints.</p>
  </section>
  <section>
    <h2 id="security_privacy">Security and Privacy Considerations</h2>
    <h3 id="fingerprintability">Fingerprintability</h3>
    <p>This specification does not expose any new information about the user and their preferences, so does not increase the risk of user fingerprinting.
    At the same time, it does expose priority information to web servers that enables them to distinguish between browsers that support the feature and ones that do not support it.
    This is not dissimilar to other web platform features, but with one important distinction:
    this information is exposed at the HTTP layer, allowing the server implementation to discover discrepancies between the User-Agent string the request is sent with and the browser that sent the request.
    It is not clear that this is a significant issue, but it is something for implementing user agents (and user agents which try to spoof others) to be aware of.
    It is also possible that the network patterns that result from the use of the feature would be observable to passive network-based observers and will enable them to distinguish supporting and non-supporting browsers.
    </p>
    <h3 id="ecosystem">Negative ecosystem side-effects</h3>
    <p>
    There's a risk that monetizing third-party components, and ad networks in particular, will require publishers to use the feature in order to upgrade the priority of their resource requests.
    While they certainly can do that, and enforce such a requirement by inspecting the HTTP/2 priorities of the resource requests they receive, the risk for that is rather small.
    <ul>
        <li><p>Such "priority upgrade" is already available in the platform today, e.g., when switching scripts from blocking to deferred or async ones.
            There's no existing evidence that advertisers have required such hacks in order to make sure their resources load first.</p></li>
        <li><p>Furthermore, monitoring that publishers complied with that requirement can be difficult for advertisers that run outside of the main frame, as it will require coordination between the their HTTP/2 termination point and the application layer.
            Depending on their architecture, such coordination may not be trivial.</p></li>
    </ul>

    </p>

    <p>If such a problem arise in the future, browsers will be able to find creative ways to fight against it.
    For example, since Priority Hints are hints by their nature, browsers will be able to ignore those hints for third-party hosts that are known to abuse the feature.
    In such a case, advertisers will not be able to distinguish such user agent intervention from lack of compliance with their Priority Hints requirements.
    </p>
  </section>


</body>

</html>
